#!/usr/bin/env python
import argparse
import difflib
import json
import math
import os
import re
import requests
import sys

# Map from Book Number -> Abbreviated Name
# Note: Book 0 does not exist according to the ESV API
BOOKS = ['NULL', 'Gen', 'Ex', 'Lev', 'Num', 'Deut', 'Josh', 'Judg', 'Ruth', '1 Sam', '2 Sam', '1 Kings', '2 Kings', '1 Chron', '2 Chron', 'Ezra', 'Neh', 'Est', 'Job', 'Ps', 'Prov', 'Eccles', 'Song', 'Isa', 'Jer', 'Lam', 'Ezek', 'Dan', 'Hos', 'Joel', 'Amos', 'Obad', 'Jonah', 'Mic', 'Nah', 'Hab', 'Zeph', 'Hag', 'Zech', 'Mal', 'Matt', 'Mark', 'Luke', 'John', 'Acts', 'Rom', '1 Cor', '2 Cor', 'Gal', 'Eph', 'Phil', 'Col', '1 Thess', '2 Thess', '1 Tim', '2 Tim', 'Titus', 'Philem', 'Heb', 'James', '1 Pet', '2 Pet', '1 John', '2 John', '3 John', 'Jude', 'Rev']

# Map from Book Number -> Number of Chapters
# Note: Book 0 does not exist according to the ESV API
CHAPTER_LENS = [-1, 50, 40, 27, 36, 34, 24, 21, 4, 31, 24, 22, 25, 29, 36, 10, 13, 10, 42, 150, 31, 12, 8, 66, 52, 5, 48, 12, 14, 3, 9, 1, 4, 7, 3, 3, 3, 2, 14, 4, 28, 16, 24, 21, 28, 16, 16, 13, 6, 6, 4, 4, 5, 3, 6, 4, 3, 1, 13, 5, 5, 3, 5, 1, 1, 1, 22]

def main():
    try:
        API_KEY = json.load(open('config.json'))['ESV']
    except JSONDecodeError:
        sys.exit('config.json is formatted incorrectly. See README.md')
    except IOError:
        sys.exit('Error reading config.json. See README.md')
        
    print('BMem: Ver. 1.0 - Author: Alexander Diaz - Download Tool')
    print('Enter desired passsage (e.g. John 1:1, jn11.35, Genesis 1-3)')
    user_input = input('Passage: ').replace(' ', '+')
    API_URL = 'https://api.esv.org/v3/passage/text/?q=%s&include-headings=false&include-short-copyright=false&include-footnotes=false&include-passage-references=false&indent-poetry=false&indent-paragraphs=0' % (user_input)

    request = requests.get(url=API_URL, headers={'Authorization': '%s' % API_KEY})
    data = json.loads(request.text)
    
    if data['passages'] == []:
        sys.exit('Passage not found.')
        
    with open('src/%s ESV.txt' % data['canonical'], 'wt') as output_file:
        print('Writing to %s ESV.txt...' % data['canonical'])
        references = data['parsed'] # List of passage references

        # For each distinct passage within the request, format and save the text (with reference) into a file in src/ .
        # Each passage reference is a 2-tuple of ints representing the first and last verse in the passage. E.g. (43011035, 43011036)
        for passage_i, reference in enumerate(references):
            output_file.write('%d-%d\n' % (reference[0], reference[1])) 

            # Parse passage reference. Reference format = BBCCCVVV, where BB is the book number, CCC is the chapter number, and VVV is the verse number
            start_book_n,       last_book_n     = reference[0] // 1000000,      reference[1] // 1000000
            start_chapter_n,    last_chapter_n  = reference[0] // 1000 % 1000,  reference[1] // 1000 % 1000
            start_verse_n,      last_verse_n    = reference[0] % 1000,          reference[1] % 1000
            
            # 2D list representing all included chapter numbers of each book in the passage.
            # E.g. For passage Exodus 38:12 - Leviticus 2:3 : [[38, 39, 40], [1, 2]]
            chapter_nums = [] 
            for i in range(start_book_n, last_book_n + 1):
                start = start_chapter_n if i == start_book_n else 1
                end = last_chapter_n if i == last_book_n else CHAPTER_LENS[i]
                chapter_nums.append([num for num in range(start, end + 1)])
                    
            print('%s %d:%d - %s %d:%d ESV' % (BOOKS[start_book_n], start_chapter_n, start_verse_n, BOOKS[last_book_n], last_chapter_n, last_verse_n))
            # Format JSON text into a list of strings, with one verse per string
            text = data['passages'][passage_i].replace('\n', ' ').replace('â€™', '\'')
            text = re.sub(r' +', ' ', text)             # e.g. '     ' -> ' '
            text = re.sub(r' *\[(\d+)\] *', r'\n\1. ', text).strip()   # e.g. ' [5] ' -> '\n5. '
            book_i, chapter_i = 0, 0
            for verse_i, verse in enumerate(text.split('\n')):
                if verse_i == 0 or verse.split(' ')[0] == '1':
                    output_file.write('%s %d\n' % (BOOKS[start_book_n + book_i], chapter_nums[book_i][chapter_i]))
                    chapter_i += 1
                    if chapter_i == len(chapter_nums[book_i]): # If we've reached the end of this book, begin parsing the next book from chapter 1
                        book_i += 1
                        chapter_i = 0
                        
                output_file.write(verse + '\n') 

if __name__ == '__main__':
    main()
